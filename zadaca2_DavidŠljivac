Preimenovanje:

Zad 2

class Product
    {
        public string Name { get; private set; } // prod. name
        public string Price { get; private set; } // prod. price
        public bool IsStocked { get; set; } // flag - is prod. in stock or not?

        public ProductObject(string name, string price)
        {
            this.Name = name;
            this.Price = price;
            this.IsStocked = false;
        }
    }

    class Inventory
    {
        List<Product> products; // List of prods.,

        public Inventory(List<Product> products) // inventory of prods.
        {
            this.products = products;
        }

        public void Restock(Product outOfStockProduct)
        {
            foreach (Product product in prodsList)
            { /
                if (outOfStockProduct == product)
                    product.IsStocked = true;
            }
        }
        public void RemoveOutOfStockProducts()
        { 
            products.RemoveAll(product => product.IsStockedStock == false);
        }
    }

Zad 4.

public class Note
    {
        public string Title { get; set; }
        public string Text { get; set; }
        public DateTime Date { get; private set; }

        public Note(string title, string text)
        {
            Title = title;
            Text = text;
            Date = DateTime.Now;
        }
    }

    public class Notebook
    {
        public string Author { get; private set; }
        public List<Note> notes;

        public Notebook(string author)
        {
            Author = author;
            notes = new List<Note>();
        }

        public void AddNote(Note note)
        {
            notes.Add(note);
        }
    }

Zad 5

public class Location
    {   
        public DateTime CreatedAt { get; private set; }
        public double Latitude { get; private set; }
        public double Longitude { get; private set; } 
        public Location(double Latitude, double Longitude)
        {
            this.Latitude = Latitude;
            this.Longitude = Longitude;
            CreatedAt = DateTime.Now;
        }
    }

    public class PathManager
    {
        private List<Location> pathPoints; 
        public PathManager()
        {
            pathPoints = new List<Location>();
        }

        public void AddNewLocationForPath(Location point)
        {
            pathPoints.Add(point);
        }

        public void RemoveLocationFromPath(Location point)
        {
            pathPoints.Remove(point);
        }
    }




Refaktoriranje:
2.zad
public class Avg
{
    public List<double> averages(List<double[]> arraysList)
    {
        List<double> avgs = new List<double>();
        foreach(double[] a in arraysList)
        {
            avgs.Add(AverageCalculator(a));
        }
        return avgs;
    }
    public double AverageCalculator(double[] array)
    {
        double average=0;
        for(int i=0; i<array.Length; i++)
        {
            average+=array[i];
        }
        return average/array.Length;
    }
}

4.zad

public class DrugiZadatak
{
    public static List<char> UniqueCharacters(string text)
    {
        List<char> chars = new List<char>();
        for(int i = 0; i < text.Length ; i++)
        {
           if(CharacterOccurrence(text, text[i]) == 1)
           {
               chars.Add(text[i]);
           }
        }
    }
    
    public static int CharacterOccurrence(string text, char characters)
    {
        int occurrenceCount=0;
        for(int j = 0; j < text.Length ; j++)
        {
            if(character == text[j])
            {
                occurrenceCount++;
            }
        }
        return occurrenceCount;
    }
}

5.zad

class DrugiZadatak
{
    public List<string> FindPalindroms(List<string> strings)
    {
        List<string> palindromes = new List<string>();
        if(strings==null)
            return palindromes;
          
        foreach(string str in strings)
        {
            if(isPalindrome(str))
            {
                palindromes.Add(str)
            }
        }
        return palindromes;
    }
    
    public bool isPalindrome(string str)
    {
        if(string.IsNullOrEmpty(str))
            return false;
        
        string trimmedString = str.Replace(" "," ").ToLower();
        string reversedString = new string(trimmedString.Reverse().ToArray());
        
        return trimmedString.Equals(reversedString);
    }
}
